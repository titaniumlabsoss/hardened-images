name: Build Hardened Images

on:
  push:
    branches: [ main ]
    paths:
      - 'images/**'
      - 'scripts/build-images.sh'
      - '.github/workflows/build-images.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'images/**'
      - 'scripts/build-images.sh'
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean
      filter:
        description: 'Filter images to build (regex pattern)'
        required: false
        default: ''
      rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  ORGANIZATION: titaniumlabs

jobs:
  discover-images:
    name: Discover Images to Build
    runs-on: ubuntu-latest
    outputs:
      base-images: ${{ steps.discovery.outputs.base-images }}
      app-images: ${{ steps.discovery.outputs.app-images }}
      all-images: ${{ steps.discovery.outputs.all-images }}
      has-images: ${{ steps.discovery.outputs.has-images }}
      image-matrix: ${{ steps.discovery.outputs.image-matrix }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Discover images
        id: discovery
        run: |
          # Discover base images
          BASE_IMAGES=()
          while IFS= read -r -d '' dockerfile; do
            image_dir=$(dirname "$dockerfile")
            relative_path=$(realpath --relative-to="images" "$image_dir")

            if [[ "$relative_path" =~ ^base_images/([^/]+)/([^/]+)$ ]]; then
              os="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              tag="$ORGANIZATION/$os:$version"
              BASE_IMAGES+=("$image_dir:$tag")
            fi
          done < <(find images/base_images -name "Dockerfile" -print0 2>/dev/null || true)

          # Discover app images
          APP_IMAGES=()
          while IFS= read -r -d '' dockerfile; do
            image_dir=$(dirname "$dockerfile")
            relative_path=$(realpath --relative-to="images" "$image_dir")

            if [[ "$relative_path" =~ ^base_images/ ]]; then
              continue
            fi

            if [[ "$relative_path" =~ ^([^/]+)/([^/]+)/([^/]+)$ ]]; then
              app="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              os="${BASH_REMATCH[3]}"

              if [[ "$os" == "alpine" ]]; then
                tag="$ORGANIZATION/$app:$version-minimal"
              else
                tag="$ORGANIZATION/$app:$version"
              fi

              APP_IMAGES+=("$image_dir:$tag")
            fi
          done < <(find images -name "Dockerfile" -not -path "*/base_images/*" -print0 2>/dev/null || true)

          # Combine all images
          ALL_IMAGES=("${BASE_IMAGES[@]}" "${APP_IMAGES[@]}")

          # Apply filter if specified
          if [[ -n "${{ github.event.inputs.filter }}" ]]; then
            FILTERED_IMAGES=()
            for image_spec in "${ALL_IMAGES[@]}"; do
              if [[ "$image_spec" =~ "${{ github.event.inputs.filter }}" ]]; then
                FILTERED_IMAGES+=("$image_spec")
              fi
            done
            ALL_IMAGES=("${FILTERED_IMAGES[@]}")
          fi

          # Convert to JSON for GitHub Actions
          BASE_IMAGES_JSON=$(if [ ${#BASE_IMAGES[@]} -eq 0 ]; then echo '[]'; else printf '%s\n' "${BASE_IMAGES[@]}" | jq -R . | jq -s -c .; fi)
          APP_IMAGES_JSON=$(if [ ${#APP_IMAGES[@]} -eq 0 ]; then echo '[]'; else printf '%s\n' "${APP_IMAGES[@]}" | jq -R . | jq -s -c .; fi)
          ALL_IMAGES_JSON=$(if [ ${#ALL_IMAGES[@]} -eq 0 ]; then echo '[]'; else printf '%s\n' "${ALL_IMAGES[@]}" | jq -R . | jq -s -c .; fi)

          # Create matrix for parallel builds
          MATRIX_JSON=$(if [ ${#ALL_IMAGES[@]} -eq 0 ]; then echo '[]'; else printf '%s\n' "${ALL_IMAGES[@]}" | jq -R 'split(":") | {path: .[0], tag: (.[1:] | join(":")), name: (.[1:] | join(":") | gsub("[/:]"; "-")), image: .[1], version: .[2], is_minimal: (.[2] | contains("-minimal"))}' | jq -s -c .; fi)

          echo "base-images=$BASE_IMAGES_JSON" >> $GITHUB_OUTPUT
          echo "app-images=$APP_IMAGES_JSON" >> $GITHUB_OUTPUT
          echo "all-images=$ALL_IMAGES_JSON" >> $GITHUB_OUTPUT
          echo "has-images=$(if [ ${#ALL_IMAGES[@]} -gt 0 ]; then echo true; else echo false; fi)" >> $GITHUB_OUTPUT
          echo "image-matrix={\"include\":$MATRIX_JSON}" >> $GITHUB_OUTPUT

          echo "Discovered ${#ALL_IMAGES[@]} images to build"

  build-images:
    name: Build - ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: discover-images
    if: needs.discover-images.outputs.has-images == 'true'

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-images.outputs.image-matrix) }}

    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' || github.event.inputs.push_images == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image }}
          tags: |
            type=raw,value=${{ matrix.version }}
            type=raw,value=${{ matrix.version }}-{{date 'YYYYMMDD'}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.path }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' || github.event.inputs.push_images == 'true' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: ${{ github.event.inputs.rebuild == 'true' }}
