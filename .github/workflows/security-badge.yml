name: Update Security Badge

on:
  workflow_run:
    workflows: ["Security Scanning"]
    types:
      - completed
  schedule:
    - cron: '0 */24 * * *'  # Every 24 hours
  workflow_dispatch:

jobs:
  update-badge:
    name: Update Security Status Badge
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest scan results
        id: scan-status
        run: |
          # Check if the last security scan workflow passed
          SCAN_STATUS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/workflows/security-scan.yml/runs \
            --jq '.workflow_runs[0].conclusion' \
            2>/dev/null || echo "none")

          if [[ "$SCAN_STATUS" == "success" ]]; then
            BADGE_COLOR="success"
            BADGE_MESSAGE="Secure"
            VULN_COUNT="0"
          elif [[ "$SCAN_STATUS" == "failure" ]]; then
            BADGE_COLOR="critical"
            BADGE_MESSAGE="Issues Found"
            VULN_COUNT="Check Logs"
          else
            BADGE_COLOR="inactive"
            BADGE_MESSAGE="Unknown"
            VULN_COUNT="N/A"
          fi

          echo "badge_color=$BADGE_COLOR" >> $GITHUB_OUTPUT
          echo "badge_message=$BADGE_MESSAGE" >> $GITHUB_OUTPUT
          echo "vuln_count=$VULN_COUNT" >> $GITHUB_OUTPUT
          echo "scan_date=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create badge JSON
        run: |
          mkdir -p .github/badges
          cat > .github/badges/security-status.json << EOF
          {
            "schemaVersion": 1,
            "label": "Security Scan",
            "message": "${{ steps.scan-status.outputs.badge_message }}",
            "color": "${{ steps.scan-status.outputs.badge_color }}",
            "vulnerabilities": "${{ steps.scan-status.outputs.vuln_count }}",
            "lastScan": "${{ steps.scan-status.outputs.scan_date }}"
          }
          EOF

      - name: Create vulnerability count badge
        run: |
          cat > .github/badges/vulnerability-count.json << EOF
          {
            "schemaVersion": 1,
            "label": "Vulnerabilities",
            "message": "${{ steps.scan-status.outputs.vuln_count }}",
            "color": "${{ steps.scan-status.outputs.badge_color }}"
          }
          EOF

      - name: Create Pull Request
        id: create-pull-request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ github.token }}
          commit-message: "chore: update security badges [skip ci]"
          title: "Update Security Badges"
          body: |
            Automated update of security status badges.

            - Security Status: ${{ steps.scan-status.outputs.badge_message }}
            - Vulnerability Count: ${{ steps.scan-status.outputs.vuln_count }}
            - Last Scan: ${{ steps.scan-status.outputs.scan_date }}
          branch: update-security-badges
          delete-branch: true
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          committer: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          add-paths: |
            .github/badges/

      - name: Auto-merge Pull Request
        if: steps.create-pull-request.outputs.pull-request-number
        run: |
          gh pr merge ${{ steps.create-pull-request.outputs.pull-request-number }} --auto --merge
        env:
          GH_TOKEN: ${{ github.token }}
